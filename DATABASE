-- Alumni Management System MySQL Database Schema

-- Create database
CREATE DATABASE IF NOT EXISTS alumni_management;
USE alumni_management;

-- Users table for authentication
CREATE TABLE users (
    id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    role ENUM('alumni', 'admin', 'student') DEFAULT 'alumni',
    is_active BOOLEAN DEFAULT TRUE,
    email_verified BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Alumni profiles
CREATE TABLE alumni_profiles (
    id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),
    user_id VARCHAR(36) NOT NULL,
    alumni_id VARCHAR(50) UNIQUE NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    batch_year INT NOT NULL,
    graduation_date DATE,
    current_job_title VARCHAR(200),
    current_company VARCHAR(200),
    industry VARCHAR(100),
    location_city VARCHAR(100),
    location_state VARCHAR(100),
    location_country VARCHAR(100),
    phone VARCHAR(20),
    linkedin_url VARCHAR(500),
    bio TEXT,
    profile_image_url VARCHAR(500),
    achievements JSON,
    skills JSON,
    is_mentor_available BOOLEAN DEFAULT FALSE,
    is_profile_public BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Events management
CREATE TABLE events (
    id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),
    event_name VARCHAR(200) NOT NULL,
    description TEXT,
    event_date DATE NOT NULL,
    event_time TIME,
    venue VARCHAR(300),
    organizer VARCHAR(200),
    organizer_contact VARCHAR(255),
    event_type ENUM('networking', 'workshop', 'reunion', 'career_fair', 'webinar', 'social'),
    max_attendees INT,
    registration_deadline DATE,
    event_image_url VARCHAR(500),
    is_active BOOLEAN DEFAULT TRUE,
    created_by VARCHAR(36),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (created_by) REFERENCES users(id)
);

-- Event registrations
CREATE TABLE event_registrations (
    id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),
    event_id VARCHAR(36) NOT NULL,
    user_id VARCHAR(36) NOT NULL,
    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    attendance_status ENUM('registered', 'attended', 'cancelled') DEFAULT 'registered',
    UNIQUE KEY unique_registration (event_id, user_id),
    FOREIGN KEY (event_id) REFERENCES events(id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Mentorship system
CREATE TABLE mentorship_requests (
    id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),
    mentor_id VARCHAR(36) NOT NULL,
    mentee_id VARCHAR(36) NOT NULL,
    industry_focus VARCHAR(100),
    role_focus VARCHAR(100),
    request_message TEXT,
    status ENUM('pending', 'accepted', 'rejected', 'completed') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (mentor_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (mentee_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Donations and contributions
CREATE TABLE donations (
    id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),
    donor_id VARCHAR(36) NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'USD',
    project_name VARCHAR(200),
    project_category ENUM('scholarship', 'infrastructure', 'research', 'sports', 'general'),
    donation_date DATE DEFAULT (CURRENT_DATE),
    payment_status ENUM('pending', 'completed', 'failed', 'refunded') DEFAULT 'pending',
    payment_reference VARCHAR(100),
    is_anonymous BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (donor_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Notifications system
CREATE TABLE notifications (
    id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),
    user_id VARCHAR(36) NOT NULL,
    title VARCHAR(200) NOT NULL,
    message TEXT NOT NULL,
    notification_type ENUM('event', 'mentorship', 'profile', 'donation', 'general'),
    is_read BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);

-- Gamification: Badges
CREATE TABLE badges (
    id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),
    badge_name VARCHAR(100) NOT NULL,
    badge_description TEXT,
    badge_icon_url VARCHAR(500),
    badge_criteria TEXT,
    points_value INT DEFAULT 0
);

-- User badges (earned badges)
CREATE TABLE user_badges (
    id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),
    user_id VARCHAR(36) NOT NULL,
    badge_id VARCHAR(36) NOT NULL,
    earned_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE KEY unique_user_badge (user_id, badge_id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (badge_id) REFERENCES badges(id) ON DELETE CASCADE
);

-- Activity feed/news
CREATE TABLE news_feed (
    id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),
    title VARCHAR(200) NOT NULL,
    content TEXT NOT NULL,
    author_id VARCHAR(36),
    post_type ENUM('news', 'achievement', 'event_highlight', 'announcement'),
    image_url VARCHAR(500),
    is_published BOOLEAN DEFAULT FALSE,
    published_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (author_id) REFERENCES users(id)
);

-- Create indexes for better performance
CREATE INDEX idx_alumni_profiles_user_id ON alumni_profiles(user_id);
CREATE INDEX idx_alumni_profiles_batch_year ON alumni_profiles(batch_year);
CREATE INDEX idx_alumni_profiles_company ON alumni_profiles(current_company);
CREATE INDEX idx_events_date ON events(event_date);
CREATE INDEX idx_events_type ON events(event_type);
CREATE INDEX idx_event_registrations_event_id ON event_registrations(event_id);
CREATE INDEX idx_event_registrations_user_id ON event_registrations(user_id);
CREATE INDEX idx_mentorship_mentor_id ON mentorship_requests(mentor_id);
CREATE INDEX idx_mentorship_mentee_id ON mentorship_requests(mentee_id);
CREATE INDEX idx_mentorship_status ON mentorship_requests(status);
CREATE INDEX idx_donations_donor_id ON donations(donor_id);
CREATE INDEX idx_donations_date ON donations(donation_date);
CREATE INDEX idx_notifications_user_id ON notifications(user_id);
CREATE INDEX idx_notifications_read ON notifications(is_read);
CREATE INDEX idx_user_badges_user_id ON user_badges(user_id);
CREATE INDEX idx_news_feed_published ON news_feed(is_published, published_at);

-- Insert sample badges
INSERT INTO badges (badge_name, badge_description, points_value) VALUES
('First Login', 'Welcome to the alumni network!', 10),
('Profile Complete', 'Completed your profile information', 25),
('Event Participant', 'Attended your first alumni event', 50),
('Mentor', 'Became a mentor to help fellow alumni', 100),
('Generous Donor', 'Made your first donation', 75),
('Networking Pro', 'Attended 5+ events', 150),
('Top Contributor', 'Donated $1000 or more', 200);

-- Insert sample events
INSERT INTO events (event_name, description, event_date, event_time, venue, organizer, event_type) VALUES
('Annual Alumni Reunion 2025', 'Join us for our biggest networking event of the year!', '2025-12-15', '18:00:00', 'Main Auditorium, Campus', 'Alumni Association', 'reunion'),
('Career Fair 2025', 'Meet top recruiters and explore career opportunities', '2025-11-20', '10:00:00', 'Convention Center', 'Career Services', 'career_fair'),
('Tech Workshop: AI in Business', 'Learn about the latest AI trends and applications', '2025-10-25', '14:00:00', 'Online Webinar', 'Tech Alumni Group', 'webinar'),
('Startup Networking Night', 'Connect with fellow entrepreneurs and investors', '2025-10-10', '19:00:00', 'Innovation Hub', 'Entrepreneur Club', 'networking');

-- Create a view for alumni dashboard summary
CREATE VIEW alumni_dashboard AS
SELECT 
    ap.*,
    u.email,
    u.role,
    COUNT(DISTINCT er.id) as events_registered,
    COUNT(DISTINCT ub.id) as badges_earned,
    SUM(DISTINCT d.amount) as total_donated
FROM alumni_profiles ap
LEFT JOIN users u ON ap.user_id = u.id
LEFT JOIN event_registrations er ON u.id = er.user_id
LEFT JOIN user_badges ub ON u.id = ub.user_id
LEFT JOIN donations d ON u.id = d.donor_id AND d.payment_status = 'completed'
GROUP BY ap.id;

-- Trigger to auto-award "First Login" badge
DELIMITER //
CREATE TRIGGER award_first_login_badge
AFTER UPDATE ON users
FOR EACH ROW
BEGIN
    IF OLD.is_active = FALSE AND NEW.is_active = TRUE THEN
        INSERT IGNORE INTO user_badges (user_id, badge_id)
        SELECT NEW.id, b.id
        FROM badges b
        WHERE b.badge_name = 'First Login';
    END IF;
END//
DELIMITER ;

-- Trigger to auto-award "Profile Complete" badge
DELIMITER //
CREATE TRIGGER award_profile_complete_badge
AFTER INSERT ON alumni_profiles
FOR EACH ROW
BEGIN
    IF NEW.first_name IS NOT NULL AND NEW.last_name IS NOT NULL 
       AND NEW.batch_year IS NOT NULL AND NEW.current_job_title IS NOT NULL
       AND NEW.current_company IS NOT NULL THEN
        INSERT IGNORE INTO user_badges (user_id, badge_id)
        SELECT NEW.user_id, b.id
        FROM badges b
        WHERE b.badge_name = 'Profile Complete';
    END IF;
END//
DELIMITER ;

-- Trigger to auto-award "Event Participant" badge
DELIMITER //
CREATE TRIGGER award_event_participant_badge
AFTER INSERT ON event_registrations
FOR EACH ROW
BEGIN
    INSERT IGNORE INTO user_badges (user_id, badge_id)
    SELECT NEW.user_id, b.id
    FROM badges b
    WHERE b.badge_name = 'Event Participant';
END//
DELIMITER ;

-- Trigger to auto-award donation badges
DELIMITER //
CREATE TRIGGER award_donation_badges
AFTER UPDATE ON donations
FOR EACH ROW
BEGIN
    IF OLD.payment_status != 'completed' AND NEW.payment_status = 'completed' THEN
        -- Award "Generous Donor" badge for first donation
        INSERT IGNORE INTO user_badges (user_id, badge_id)
        SELECT NEW.donor_id, b.id
        FROM badges b
        WHERE b.badge_name = 'Generous Donor';
        
        -- Check for "Top Contributor" badge (total donations >= 1000)
        IF (SELECT SUM(amount) FROM donations WHERE donor_id = NEW.donor_id AND payment_status = 'completed') >= 1000 THEN
            INSERT IGNORE INTO user_badges (user_id, badge_id)
            SELECT NEW.donor_id, b.id
            FROM badges b
            WHERE b.badge_name = 'Top Contributor';
        END IF;
    END IF;
END//
DELIMITER ;
